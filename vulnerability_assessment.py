#!/usr/bin/env python3
"""
vulnerability_assessment.py

CLI-based vulnerability assessment automation tool with animations and output saving.
Supports wpscan, nikto, whatweb, sqlmap.
Each tool runs in its own tmux session with output saving.
"""
import subprocess
import sys
import shutil
import os
import time
from datetime import datetime
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich import box

console = Console()

TMUX_CMD = shutil.which("tmux")
if not TMUX_CMD:
    console.print("[bold red]Error:[/bold red] tmux is not installed.")
    sys.exit(1)

def show_banner():
    banner_text = "[bold cyan]Vulnerability Assessment Tool[/bold cyan]\n[italic yellow]by Kumar[/italic yellow]"
    panel = Panel(banner_text, expand=False, box=box.DOUBLE)
    console.print(panel)

def ask_url():
    url = Prompt.ask("üåê [cyan]Enter target URL (e.g., http://example.com)[/cyan]").strip()
    if not url.startswith("http://") and not url.startswith("https://"):
        url = "http://" + url
    return url

# --- NEW: manual vs auto output selection ---
def ask_output_manual(tool):
    filename = Prompt.ask(f"üíæ Enter output filename (without extension) for {tool}", default="").strip()
    directory = Prompt.ask("üìÇ Enter output directory (leave blank for auto)", default="").strip()
    return filename, directory

def make_auto_folder(name):
    ts = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    folder = f"{name.replace('.', '_')}_{ts}"
    os.makedirs(folder, exist_ok=True)
    return folder
# --------------------------------------------------

def launch_in_tmux(tool_name, command, output_path=None):
    try:
        session_name = f"{tool_name}_session"
        subprocess.call(["tmux", "kill-session", "-t", session_name], stderr=subprocess.DEVNULL)

        if output_path:
            command = f"export TERM=xterm-256color; {command} | tee {output_path}; clear; echo 'Press enter to return to menu...'; read"
        else:
            command = f"export TERM=xterm-256color; {command}; clear; echo 'Press enter to return to menu...'; read"

        with Progress(SpinnerColumn(), TextColumn("[progress.description]{task.description}")) as progress:
            progress.add_task("Spawning tmux session...", total=None)
            time.sleep(1)

        subprocess.call(["tmux", "new-session", "-s", session_name, "sh", "-c", command])
        console.print(f"\n‚úÖ [green]{tool_name} session ended.[/green] Returning to menu...\n")
    except Exception as e:
        console.print(f"[bold red]Error launching '{tool_name}':[/bold red] {e}")

def run_wpscan():
    url = ask_url()
    fn, dir_ = ask_output_manual("wpscan")
    if fn == "" and dir_ == "":
        target = url.replace("http://", "").replace("https://", "").replace("/", "_")
        folder = make_auto_folder(target)
        output_path = os.path.join(folder, f"wpscan_{target}.txt")
    else:
        if dir_:
            os.makedirs(dir_, exist_ok=True)
        else:
            dir_ = "."
        if fn:
            output_path = os.path.join(dir_, f"{fn}.txt")
        else:
            output_path = os.path.join(dir_, "wpscan_output.txt")

    cmd = f"wpscan --url {url}"
    launch_in_tmux("wpscan", cmd, output_path)

def run_nikto():
    url = ask_url()
    fn, dir_ = ask_output_manual("nikto")
    if fn == "" and dir_ == "":
        target = url.replace("http://", "").replace("https://", "").replace("/", "_")
        folder = make_auto_folder(target)
        output_path = os.path.join(folder, f"nikto_{target}.txt")
    else:
        if dir_:
            os.makedirs(dir_, exist_ok=True)
        else:
            dir_ = "."
        if fn:
            output_path = os.path.join(dir_, f"{fn}.txt")
        else:
            output_path = os.path.join(dir_, "nikto_output.txt")

    cmd = f"nikto -h {url}"
    launch_in_tmux("nikto", cmd, output_path)

def run_whatweb():
    url = ask_url()
    fn, dir_ = ask_output_manual("whatweb")
    if fn == "" and dir_ == "":
        target = url.replace("http://", "").replace("https://", "").replace("/", "_")
        folder = make_auto_folder(target)
        output_path = os.path.join(folder, f"whatweb_{target}.txt")
    else:
        if dir_:
            os.makedirs(dir_, exist_ok=True)
        else:
            dir_ = "."
        if fn:
            output_path = os.path.join(dir_, f"{fn}.txt")
        else:
            output_path = os.path.join(dir_, "whatweb_output.txt")

    cmd = f"whatweb {url}"
    launch_in_tmux("whatweb", cmd, output_path)

def run_sqlmap():
    url = ask_url()
    fn, dir_ = ask_output_manual("sqlmap")
    if fn == "" and dir_ == "":
        target = url.replace("http://", "").replace("https://", "").replace("/", "_")
        folder = make_auto_folder(target)
        output_path = os.path.join(folder, f"sqlmap_{target}.txt")
    else:
        if dir_:
            os.makedirs(dir_, exist_ok=True)
        else:
            dir_ = "."
        if fn:
            output_path = os.path.join(dir_, f"{fn}.txt")
        else:
            output_path = os.path.join(dir_, "sqlmap_output.txt")

    cmd = f"sqlmap -u {url} --batch"
    launch_in_tmux("sqlmap", cmd, output_path)

def main():
    tools = {
        "1": ("wpscan", run_wpscan),
        "2": ("nikto", run_nikto),
        "3": ("whatweb", run_whatweb),
        "4": ("sqlmap", run_sqlmap),
        "5": ("Exit", None),
    }

    show_banner()

    while True:
        console.print("\n[bold magenta]=== Vulnerability Assessment Menu ===[/bold magenta]")
        for key, (name, _) in tools.items():
            console.print(f"[cyan][{key}][/cyan] {name}")

        try:
            choice = Prompt.ask("üëâ Select an option", default="1").strip()
        except KeyboardInterrupt:
            console.print("\n[yellow]Pressed Ctrl+C. Returning to menu.[/yellow]")
            continue

        if choice == "5":
            console.print("[bold green]Exiting...[/bold green]")
            break

        action = tools.get(choice)
        if action:
            _, func = action
            try:
                func()
            except KeyboardInterrupt:
                console.print("\n[bold yellow]Interrupted. Back to menu.[/bold yellow]")
        else:
            console.print("[red]Invalid selection. Choose between 1-5.[/red]")

if __name__ == "__main__":
    main()
